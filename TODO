Now
--------------------------------------------------------------------
Get rid of the intliteral and floatliteral classes and have a single
literal class which then hooks into the type class itself. 
	- Not sure about this, LLVM does constant folding itself
		- YES. make a tokenizer which makes floats, ints, negatives whatever
		all in one literal class. Then when codegen is happening, if a literal
		is part of a calculation, the type can be assessed from the literal 
		and operations can be validated.

Implement a symbol class which stores information about it's type
and stuff like that, so when the compiler gets to the point:
uint a = -1 it can spit out a warning that incompatible types.


Short term
--------------------------------------------------------------------

add the backslash character to allow statements to span lines
or maybe change the spec so that newlines arent counted as delimiters
and make the condition code for control flow statements more intelligient

scan all the code for functions before generating code, so that functions don't have to be forward declared

better error reporting in codegen

Support signed as well as unsigned integers - Partially

support void, bool

allow pointer types

allow unary operators - Not fully done

add for and foreach

change all binary operation code to take notice of the input types

arrays


Long Term
---------------------------------------------------------------------
structs
anonymous functions
classes
inheritance


building out.ll file
---------------------------------------------------------------------
llc(-3.5) -o out.s out.ll
clang -lc -o out out.s
or gcc also works
